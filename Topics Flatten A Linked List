/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node * merge(Node * a, Node * b){
    if(a==NULL){
        return b;
    }
    if(b == NULL){
        return a;
    }
    Node * head = NULL;
    Node *tail = NULL;
    while(a!=NULL and b!=NULL){
    if(a->data <= b->data){
        if(head == NULL){
            head = a;
            tail = a;
            a = a->child;
        }
        else{
            tail->child = a;
            tail = tail->child;
            a = a->child;
        }
        
    }
    else{
        if(head == NULL){
            head = b;
            tail = b;
            b = b->child;
        }
        else{
            tail->child = b;
            tail = tail->child;
            b = b->child;
        }
    }
    }
    if(a == NULL){
        tail->child = b;
        head->next = NULL;
    }
    else if(b == NULL){
        tail->child = a;
        head->next = NULL;
      
    }
    return head;
    
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
    if(head == NULL || head->next == NULL){
        return head;
    }
    head->next = flattenLinkedList(head->next);
    head = merge(head,head->next);
    return head;
}
