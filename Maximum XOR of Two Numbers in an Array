#include<bits/stdc++.h>

/* IDEA:
1) Put all numbers of array in trie in correct bits wise
2) Again with each number of array find the maximum xor with trie.

*/

struct TrieNode
{
      TrieNode * child[2];
       TrieNode(){
           child[0] = NULL;
           child[1] = NULL;
       }
};

class Trie{
    private :
    TrieNode * root ;
    public:
    Trie(){
        root = new TrieNode();
    }
    void insert(int num){
        TrieNode * curr = root;   
//         5 -> 0000000000000101
//             31--------------1-0
        for(int i = 31 ;i>=0 ; i--)
        {
            int index = ((num>>i)&1);
            if(curr->child[index] == NULL)
            {
                curr->child[index] = new TrieNode();
            }
            curr = curr->child[index];
        }
    }
    int getMax(int x){
        TrieNode * curr = root;
        int maxans = 0;
        for(int i = 31; i>=0 ;i-- ){
            int index = ((x>>i) & 1);
            if(curr->child[1-index] != NULL){
                maxans = (maxans) | (1<<i) ;
                curr= curr->child[1-index];//go to that bit
            }
            else{
                curr = curr->child[index];
            }
        }
        return maxans;
    }
    
};

int maximumXor(vector<int> A)
{
    Trie * t  = new Trie();
    for(auto & x : A){
        t->insert(x);
    }
    int maxAns = 0 ;
    for(auto & x : A){
        int temp = t->getMax(x) ;
        maxAns = max(maxAns,temp);
    }
    return maxAns;
}
