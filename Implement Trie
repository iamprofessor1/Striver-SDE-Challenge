/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct myTrie{
  myTrie * child[26];
   bool isEnd;
   myTrie(){
       for(int i = 0 ; i<26 ;i++){
           child[i] = NULL;
       }
       isEnd = false;
   }
};

class Trie {

public:

    /** Initialize your data structure here. */
    myTrie * head ;
    Trie() {
        head =  new myTrie();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        myTrie * curr = head;
        for(int i = 0; i <word.size();i++){
            int index = word[i]-'a';
            if(curr->child[index] == NULL){
                curr->child[index] = new myTrie();
            }
            curr = curr->child[index];
        }
        curr->isEnd = true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        myTrie * curr = head;
        for(int i = 0 ; i<word.size();i++){
            int index = word[i] - 'a';
            if(curr->child[index]== NULL){
                return false;
            }
            curr = curr->child[index];
        }
        return curr->isEnd;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        myTrie * curr = head;
        for(int i = 0 ; i <prefix.size() ;i++){
            int index = prefix[i] -'a';
            if(curr->child[index] == NULL){
                 return false;   
             }
            curr = curr->child[index];
        }
        return true;
    }
};
