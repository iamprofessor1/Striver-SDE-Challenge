#include<bits/stdc++.h>

struct TrieNode{
      TrieNode* child[26];
      bool isEnd ;
      TrieNode(){
          isEnd = false;
          for(int i = 0 ; i<26;i++){
              child[i] = NULL;
          }
      }
};

class Trie{
    private:
      TrieNode * root;
    public:
    Trie(){
        root = new  TrieNode();
    }
    
    void insert(string & word){
        TrieNode * curr = root;
        for(int i = 0 ; i<word.size();i++){
            int index  = word[i] - 'a';
            if(curr->child[index]==NULL){
            curr->child[index] = new TrieNode();
            }
            curr = curr->child[index];
        }
        curr->isEnd = true;
    }
    
    bool search(string & word){
        TrieNode * curr = root;  
        for(int i = 0 ; i<word.size();i++){
            int index  = word[i] - 'a';
            if(curr->child[index]==NULL){
                return false;
            }
            curr = curr->child[index];
        }
        return curr->isEnd ;
    }
    
    bool checkAllprefixExist(string & word){
        TrieNode * curr = root;
        for(int i = 0 ; i<word.size();i++){
            int index  = word[i] - 'a';
            if(curr->child[index]==NULL || curr->child[index]->isEnd == false){
                return false;
            }
            curr = curr->child[index];
        }
        return curr->isEnd ;
    }
    
};

string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie t;
    for(auto & x : a){
        t.insert(x);
    }
    string longest ="";
    for(auto & x : a){
        if(t.checkAllprefixExist(x)){
//             this is for greter lenght
            if(x.size() > longest.size()){
                longest = x;
            }
//             this is for lexographical same length;
            else if(x.size() == longest.size() and x<longest){
                longest  =x;
            }
        } 
    }
    if(longest==""){
        return "None";
    }
    
    return longest;
}
