#include<bits/stdc++.h>

/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    if(root == NULL){
        return {{}} ;
    }
    vector<vector<int>>ans;
    vector<int>pre;
    vector<int>in;
    vector<int>post;
    stack<pair<BinaryTreeNode<int> * , int>>s;
    // node and state 
    s.push({root , 1});
    // node and state
    while(!s.empty()){
        auto temp = s.top();
        int state = temp.second;
        BinaryTreeNode<int> * curr = temp.first;
        if(state == 1){
            pre.push_back(curr->data);
            s.top().second = state+1;
            if(curr->left!=NULL)
            {s.push({curr->left,1});}
        }
       else if(state == 2){
            in.push_back(curr->data);
            s.top().second = state+1;
            if(curr->right)
            { s.push({curr->right,1}); }
        }
        else{
            post.push_back(curr->data);
            s.pop();
        }
        
    }
    ans.push_back(in);
    ans.push_back(pre);
    ans.push_back(post);
    
    
    return ans;
    
    if(root == NULL){
        return {{}};
    }
    vector<int>pre,in,post;
    stack<pair<BinaryTreeNode<int> * ,int>>s;
    s.push({root,1});
    while(s.empty() == false){
        auto p = s.top();
        int state = p.second;
        if(state == 1){
            pre.push_back(p.first->data);
            p.second += 1;
            if(p.first->left != NULL){
                s.push({p.first->left,1});
            }
        }
        else if(state == 2){
            
        }
    }
}
