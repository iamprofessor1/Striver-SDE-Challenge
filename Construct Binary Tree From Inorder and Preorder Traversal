#include<bits/stdc++.h>

/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
TreeNode<int> * cTree(vector<int> &inorder, vector<int> &preorder, int is, int ie,int &index , unordered_map<int,int>& ump){
    if(is>ie){
        return NULL;
    }
    int value = preorder[index++];
     TreeNode<int> * root = new TreeNode<int>(value);
    int index_in_inorder = ump[value];
    root->left = cTree(inorder,preorder,is,index_in_inorder-1,index,ump);
    root->right = cTree(inorder,preorder,index_in_inorder+1,ie,index,ump);
    
    return root;
    
}


TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	//    Write your code here
    unordered_map<int,int>ump;
    for(int i = 0 ; i<inorder.size();i++){
        ump[inorder[i]] = i;
    }
    int n = inorder.size();
    int index =0 ;
   TreeNode<int> * root = cTree(inorder,preorder,0,n-1,index,ump);
    
    return root;
    
    
}
