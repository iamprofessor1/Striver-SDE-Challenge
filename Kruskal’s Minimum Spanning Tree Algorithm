#include<bits/stdc++.h>

struct DSU
{
    vector<int> parent;
    vector<int> rank;

    DSU(int n)
    {
        parent.resize(n + 1);
        rank.resize(n + 1);
        // change acording to question
        // vertices
        for (int i = 1; i <= n; i++)
        {
            parent[i] = i;
            rank[i] = 0; // initial 0 height
        }
    }
    int Find(int x)
    {
        if (parent[x] == x)
        {
            return x;
        }
        return parent[x] = Find(parent[x]);
    }

    void Union(int x, int y)
    {
        int x_parent = Find(x);
        int y_parent = Find(y);
        if (x_parent == y_parent)
        {
            return;
        }
        if (rank[x_parent] < rank[y_parent])
        {
            parent[x_parent] = y_parent;
        }
        else if (rank[y_parent] < rank[x_parent])
        {
            parent[y_parent] = x_parent;
        }
        else
        {
            parent[x_parent] = y_parent;
            rank[y_parent]++;
        }
    }
    int distinctComponent()
    {
        int cnt = 0;
        for (int i = 1; i < parent.size(); i++)
        {
            if (Find(i) == i)
            {
                // means parent is same as parent
                cnt++;
            }
        }
        return cnt;
    }
};

struct node
{
    int u, v, wt;
    node(int u, int v, int wt)
    {
        this->u = u;
        this->v = v;
        this->wt = wt;
    }
};

bool cmp(const node &n1, const node &n2)
{
    return n1.wt < n2.wt;
}

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<node> edges;
    DSU d(n);
    for(int i = 0 ; i<m ;i++)
    {
        int u = graph[i][0];
        int v = graph[i][1];
        int wt = graph[i][2];
        edges.push_back({u, v, wt});
    }
    sort(edges.begin(), edges.end(), cmp); // n log n time
    int mstSum = 0;
    vector<pair<int, int>> mst;
    for (int i = 0; i < edges.size(); i++)
    {
        int u = edges[i].u;
        int v = edges[i].v;
        int wt = edges[i].wt;

        int parent_u = d.Find(u);
        int parent_v = d.Find(v);

        if (parent_u != parent_v)
        {
            // means both are of different set
            mst.push_back({u, v});
            d.Union(u, v);
            mstSum += wt;
        }
    }
    return mstSum;

}
