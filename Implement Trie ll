struct TrieNode{
    TrieNode * child[26] ; // self referential structure
    int isEndcnt ; // end cnt
    int lcount; 
    TrieNode() {
        for(int i = 0; i<26 ;i++){
            child[i] == NULL;
        }
        isEndcnt = 0;
        lcount = 0;
    }
};

class Trie{

    public:
    TrieNode * root ;
    
    Trie(){
        root = new TrieNode();
    }

    void insert(string &word){
       TrieNode * curr = root;
        for(int i = 0 ;i<word.size();i++){
            int index = word[i] - 'a';
            
            if(curr->child[index] == NULL){
                curr->child[index] = new TrieNode ();
            }
            curr = curr->child[index];
            curr->lcount++;
        }
        curr->isEndcnt +=1;
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
        TrieNode * curr =root;
        for(int i = 0 ; i<word.size() ;i++){
            int index = word[i]-'a';
            
            if(curr->child[index] == NULL){
                return 0;
            }
            curr = curr->child[index];
        }
        return curr->isEndcnt;
    }

    int countWordsStartingWith(string &word){
        TrieNode * curr =root;
        for(int i= 0 ;i<word.size() ;i++){
            int index = word[i] - 'a';
            if(curr->child[index] == NULL){
                return 0;
            }
            curr = curr->child[index];       
        } 
        return curr->lcount;
    }
    
    
    void erase(string &word){
        TrieNode *curr=root;
        for(int i=0;i<word.length();i++)
        {
            int index = word[i]-'a';
            curr=curr->child[index];
            curr->lcount-=1;
        }
        curr->isEndcnt-=1;
    }
};
