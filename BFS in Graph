#include<bits/stdc++.h>
void convertor(unordered_map<int,list<int>>&adj,vector<pair<int,int>>&edges){
    for(int i = 0 ;i<edges.size();i++){
        int u = edges[i].first;
        int v = edges[i].second;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(auto&x : adj){
        x.second.sort();
    }
}

void  bfs(int verti, unordered_map<int,list<int>>&adj  ,vector<bool>&visited,vector<int>&ans)
{
    queue<int>q;
    visited[verti] = true;
    q.push(verti);
    while(q.empty()==false){
        int curr = q.front();
        q.pop();
        ans.push_back(curr);
        for(auto x :  adj[curr]){
            if(visited[x] == false){
                visited[x] = true;
                q.push(x);
            }
        }
    }
}


vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
   unordered_map<int,list<int>> adj;
    convertor(adj,edges);
    vector<int>ans;
    vector<bool>visited(vertex  +1,false);
    for(int vertices = 0 ; vertices<vertex; vertices++){ 
        if(visited[vertices] == false){
            bfs(vertices, adj,visited,ans);
        }
    }
    return ans;
    
}
